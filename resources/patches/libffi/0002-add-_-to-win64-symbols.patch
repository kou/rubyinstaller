diff -ru a/src/x86/ffi.c b/src/x86/ffi.c
--- a/src/x86/ffi.c	2010-01-01 01:32:40.000000000 +0900
+++ b/src/x86/ffi.c	2011-05-05 21:10:56.818521800 +0900
@@ -262,7 +262,7 @@
 #endif /* X86_WIN32 */
 #ifdef X86_WIN64
 extern int
-ffi_call_win64(void (*)(char *, extended_cif *), extended_cif *,
+_ffi_call_win64(void (*)(char *, extended_cif *), extended_cif *,
                unsigned, unsigned, unsigned *, void (*fn)(void));
 #endif
 
@@ -317,7 +317,7 @@
               avalue[i] = local;
             }
         }
-        ffi_call_win64(ffi_prep_args, &ecif, cif->bytes,
+        _ffi_call_win64(ffi_prep_args, &ecif, cif->bytes,
                        cif->flags, ecif.rvalue, fn);
       }
       break;
@@ -355,7 +355,7 @@
      __attribute__ ((regparm(1)));
 #endif
 #ifdef X86_WIN64
-void FFI_HIDDEN ffi_closure_win64 (ffi_closure *);
+void FFI_HIDDEN _ffi_closure_win64 (ffi_closure *);
 #endif
 
 /* This function is jumped to by the trampoline */
@@ -545,7 +545,7 @@
     {
       int mask = FLAG(0)|FLAG(1)|FLAG(2)|FLAG(3);
       FFI_INIT_TRAMPOLINE_WIN64 (&closure->tramp[0],
-                                 &ffi_closure_win64,
+                                 &_ffi_closure_win64,
                                  codeloc, mask);
       /* make sure we can execute here */
     }
diff -ru a/src/x86/win64.S b/src/x86/win64.S
--- a/src/x86/win64.S	2010-01-01 01:32:40.000000000 +0900
+++ b/src/x86/win64.S	2011-05-05 21:12:07.455445900 +0900
@@ -20,7 +20,7 @@
 PUBLIC	ffi_call_win64
 
 EXTRN	__chkstk:NEAR
-EXTRN	ffi_closure_win64_inner:NEAR
+EXTRN	_ffi_closure_win64_inner:NEAR
 
 _TEXT	SEGMENT
 
@@ -30,7 +30,7 @@
 ;;;    first four parameters are float or double
 ;;;
 ;;; It must move the parameters passed in registers to their stack location,
-;;; call ffi_closure_win64_inner for the actual work, then return the result.
+;;; call _ffi_closure_win64_inner for the actual work, then return the result.
 ;;; 
 ffi_closure_win64 PROC FRAME
 	;; copy register arguments onto stack
@@ -72,11 +72,11 @@
 	mov	rcx, rax	; context is first parameter
 	mov	rdx, rsp	; stack is second parameter
 	add	rdx, 48		; point to start of arguments
-	mov	rax, ffi_closure_win64_inner
+	mov	rax, _ffi_closure_win64_inner
 	call	rax		; call the real closure function
 	add	rsp, 40
 	movd	xmm0, rax	; If the closure returned a float,
-                                ; ffi_closure_win64_inner wrote it to rax
+                                ; _ffi_closure_win64_inner wrote it to rax
 	ret	0
 ffi_closure_win64 ENDP
 
@@ -243,7 +243,7 @@
 #    first four parameters are float or double
 #
 # It must move the parameters passed in registers to their stack location,
-# call ffi_closure_win64_inner for the actual work, then return the result.
+# call _ffi_closure_win64_inner for the actual work, then return the result.
 # 
 	.balign 16
         .globl _ffi_closure_win64	
@@ -291,7 +291,7 @@
 	callq	*%rax		# call the real closure function
 	add	$40, %rsp
 	movq	%rax, %xmm0	# If the closure returned a float,
-                                # ffi_closure_win64_inner wrote it to rax
+                                # _ffi_closure_win64_inner wrote it to rax
 	retq
 .ffi_closure_win64_end:
 
